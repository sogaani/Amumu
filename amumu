#!/bin/bash

# Amumu-client CLI
# ------------
#
#   Usage:
#
#     ./amumu <cmd> ...
#

main () {
  local SELF_PATH DIR SYM
  # get the absolute path of the executable
  SELF_PATH="$0"
  if [ "${SELF_PATH:0:1}" != "." ] && [ "${SELF_PATH:0:1}" != "/" ]; then
    SELF_PATH=./"$SELF_PATH"
  fi
  SELF_PATH=$( cd -P -- "$(dirname -- "$SELF_PATH")" \
            && pwd -P \
            ) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

  # resolve symlinks
  while [ -h "$SELF_PATH" ]; do
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink -- "$SELF_PATH")
    SELF_PATH=$( cd -- "$DIR" \
              && cd -- $(dirname -- "$SYM") \
              && pwd \
              )/$(basename -- "$SYM")
  done

  # path
  AMUMU_DIR=$(dirname -- "$SELF_PATH")

  cd $AMUMU_DIR

  export AMUMU_DIR

  local cmd="$1"
  shift
  case $cmd in
    client )
      cmd="amumu_$cmd"
      ;;
    * )
      cmd="amumu_help"
      ;;
  esac
  $cmd "$@" && exit 0 || fail "failed somehow"
}

amumu_client () {
  local cmd
  cmd="$0"
  shift
  if ! [ -f "config.json" ]; then
    cp -v client_config.sample.json client_config.json
  fi

  ensure_dir log

  node src/amumu-${cmd}.js "$@"> /dev/stdout 2>&1 | tee -a ./log/${name}
  return ${PIPESTATUS[0]}
}

ensure_dir () {
  if ! [ -d "$1" ]; then
    mkdir -p -- "$1" || fail "couldn't create $1"
  fi
}

amumu_help () {
  cat <<EOF

Usage: ./amumu <cmd> ...

Commands:

client <file> <json>    Run a client.
help                    Output this information.

File:

amumu do not use.

Json:

amumu need keys 'id' and 'recorded' on chinachu.
amumu do not use other keys.
exemple
{
    "id": "0000id",
    "recorded": "/usr/local/chinachu/recorded/hoge.m2ts",
}


Examples:
#chinachu config.json
{
recordedCommand: amumu client
}

EOF

  return 0
}

main "$@"