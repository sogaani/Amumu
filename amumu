#!/bin/bash

# Amumu-client CLI
# ------------
#
#   Usage:
#
#     ./amumu <cmd> ...
#

NODE_VER=8.1.3
NAVE_VER=2.2.3

main () {
  local SELF_PATH DIR SYM
  # get the absolute path of the executable
  SELF_PATH="$0"
  if [ "${SELF_PATH:0:1}" != "." ] && [ "${SELF_PATH:0:1}" != "/" ]; then
    SELF_PATH=./"$SELF_PATH"
  fi
  SELF_PATH=$( cd -P -- "$(dirname -- "$SELF_PATH")" \
            && pwd -P \
            ) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

  # resolve symlinks
  while [ -h "$SELF_PATH" ]; do
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink -- "$SELF_PATH")
    SELF_PATH=$( cd -- "$DIR" \
              && cd -- $(dirname -- "$SYM") \
              && pwd \
              )/$(basename -- "$SYM")
  done

  # path
  AMUMU_DIR=$(dirname -- "$SELF_PATH")
  NAVE_DIR=${AMUMU_DIR}/.nave
  NODE_PATH=${NAVE_DIR}/installed/${NODE_VER}/bin/node
  NPM_PATH=${NAVE_DIR}/installed/${NODE_VER}/bin/npm
  MONGO_DIR=${AMUMU_DIR}/.mongo
  DB_PATH=${AMUMU_DIR}/db
  export PATH=${MONGO_DIR}/bin:$NAVE_DIR:${NAVE_DIR}/installed/${NODE_VER}/bin:$PATH

  cd $AMUMU_DIR

  export AMUMU_DIR
  export NAVE_DIR

  local cmd="$1"
  shift
  case $cmd in
    client | installer | setup)
      cmd="amumu_$cmd"
      ;;
    * )
      cmd="amumu_help"
      ;;
  esac
  $cmd "$@" && exit 0 || fail "failed somehow"
}

amumu_client () {
  if ! [ -f "client_config.json" ]; then
    cp -v client_config.sample.json client_config.json
  fi

  ensure_dir log

  node src/amumu_client.js "$1" > /dev/stdout 2>&1 | tee -a ./log/client
  return ${PIPESTATUS[0]}
}

amumu_setup () {
  local cmd="$1"
  shift
  case $cmd in
    encode | db)
      cmd="amumu_setup_$cmd"
      ;;
    * )
      cmd="amumu_setup_help"
      ;;
  esac
  $cmd "$@" && return 0
}

amumu_setup_encode () {
  if [`ps aux | grep mongod | grep -v grep | wc -l` = 0 ]; then
    amumu_db_start
  fi

  tmp=${AMUMU_DIR}/tmp.json
  cat $1 |  jq 'map(select( .recorded | contains(".m2ts")) | {id, recorded})'  > ${tmp}
  len=$(cat ${tmp} | jq length)
  for i in $( seq 0 $(($len - 1)) ); do
    raw=$(cat ${tmp} | jq .[$i])
    recorded=$(echo ${raw} | jq '.recorded')
    if eval [ -f "${recorded}" ]; then
      amumu_client "${raw}"
    fi
  done

  return 0
}

amumu_setup_db () {
  ensure_dir "${DB_PATH}"

  [ "$(stat -c %U ${DB_PATH})" = mkngodb ] || chown -R mongodb ${DB_PATH}

  mongod --fork --logpath ${AMUMU_DIR}/mongod.log && return 0
}

amumu_installer () {
  echo "Amumu Installer Menu:"
  echo "[!] These are installed under all ${AMUMU_DIR}/..."
  echo "[!] Recommend the Auto installation."

  local PS3 item cmd
  PS3="what do you install? > "
  select item in \
    "Auto (full)" "Node.js Environment and Modules" "mongodb"
  do
    echo "selected: ${item}"
    case $item in
      "Auto (full)" )
        cmd="amumu_installer_auto_full"
        ;;
      "Node.js Environment and Modules" )
        cmd="amumu_installer_node_full"
        ;;
      "mongodb" )
        cmd="amumu_installer_mongodb"
        ;;
      * )
        cmd="amumu_installer"
        ;;
    esac
    $cmd && break
  done


  return 0
}

amumu_installer_auto_full () {
  amumu_installer_node
  amumu_installer_node_modules
  amumu_installer_mongodb

  return 0
}

amumu_installer_node_full () {
  amumu_installer_node
  amumu_installer_node_modules

  return 0
}

amumu_installer_node () {
  remove_dir "$NAVE_DIR"
  ensure_dir "$NAVE_DIR"

  echo "Installing Node using Nave..."
  wget -O - https://github.com/isaacs/nave/archive/v${NAVE_VER}.tar.gz | tar zxvf - -C $NAVE_DIR nave-${NAVE_VER}/nave.sh
  mv ${NAVE_DIR}/nave-${NAVE_VER}/nave.sh ${NAVE_DIR}/
  rm -rfv $NAVE_DIR/nave-${NAVE_VER}
  ${NAVE_DIR}/nave.sh install $NODE_VER
  rm -fv ${NAVE_DIR}/node
  ln -sv $NODE_PATH ${NAVE_DIR}/node
  ln -sv $NPM_PATH ${NAVE_DIR}/npm

  echo "done."

  return 0
}

amumu_installer_node_modules () {
  echo "Installing Node Modules using NPM..."

  npm install
  npm update

  echo "done."

  return 0
}

amumu_installer_mongodb () {
  remove_dir "$MONGO_DIR"
  ensure_dir "$MONGO_DIR"

  echo "Installing mongodb"
  wget -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.6.tgz | tar -zxvf mongodb-linux-x86_64-3.4.6.tgz
  cp -R -n mongodb-linux-x86_64-3.4.6/ ${MONGO_DIR}
  rm -rfv mongodb-linux-x86_64-3.4.6/

  echo "done."

  return 0
}

ensure_dir () {
  if ! [ -d "$1" ]; then
    mkdir -p -- "$1" || fail "couldn't create $1"
  fi
}

remove_dir () {
  if [ -d "$1" ]; then
    rm -rf -- "$1" || fail "couldn't remove $1"
    echo "removed \`$1'"
  fi
}

amumu_help () {
  cat <<EOF

Usage: ./amumu <cmd> ...

Commands:
  installer               Install binaries
  client <json>           Run a client.
  setup                   Run db
  help                    Output this information.

json:
  amumu need keys 'id' and 'recorded' on chinachu.
  amumu do not use other keys.

  exemple:
  {
      "id": "0000id",
      "recorded": "/usr/local/chinachu/recorded/hoge.m2ts",
  }

EOF

  return 0
}

amumu_setup_help () {
  cat <<EOF

Usage: ./amumu setup <cmd> ...

Commands:
  encode <path/to/recorded.json>  Queue encode and run a mongodb if not run.
  db                              Run a mongodb.
  help                            Output this information.

EOF

  return 0
}


main "$@"